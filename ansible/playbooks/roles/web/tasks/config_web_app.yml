###
# Pulls the code from a remote Git repository, configures the web application,
# creates a virtualenv, and collects static assets
#
---
- name: write nginx configuration
  template: src=webapp.conf.j2 dest=/etc/nginx/sites-enabled/{{app_name}}
  sudo: yes
  notify:
    - restart nginx

- name: Write htpasswd
  template: src=nginx.htpasswd.j2 dest=/etc/nginx/.htpasswd
  sudo: yes

- name: see if the code repository exists
  stat: path={{app_code_dir}}
  register: existing_app_code_dir

- name: checkout web app code if the directory does not exist
  git: repo={{code_repository}} dest={{app_code_dir}}
  sudo_user: "{{deploy_user}}"
  when: existing_app_code_dir.stat.isdir is not defined

- name: pull for latest from the master branch if code directoy exists
  command: git pull origin master
  sudo_user: "{{deploy_user}}"
  args:
    chdir: "{{app_code_dir}}"
  when: existing_app_code_dir.stat.isdir is defined

- name: install web application dependencies listed in requirements.txt
  sudo_user: "{{deploy_user}}"
  pip: requirements={{requirements_file}}
       virtualenv={{virtualenv_dir}}

- name: install web application dependencies listed in dev requirements.txt
  sudo_user: "{{deploy_user}}"
  pip: requirements={{devrequirements_file}}
       virtualenv={{virtualenv_dir}}

- name: ensure gunicorn is installed
  sudo_user: "{{deploy_user}}"
  pip: name=gunicorn virtualenv={{virtualenv_dir}}

- name: check if app/static directory exists
  file: path=/var/www/static owner={{deploy_user}} state=directory

- name: check/create gunicorn log directory
  file: path=/var/log/gunicorn owner={{deploy_user}} state=directory

- name: check/create app log file
  file: path=/var/log/webapp.log owner={{deploy_user}} state=touch

- name: check/create gpg directory
  file: path=/gpg owner={{deploy_user}} state=directory

- name: copy gpg public key store
  copy: src=pubring.gpg dest=/gpg/pubring.gpg owner={{deploy_user}}

- name: copy gpg trust store
  copy: src=trustdb.gpg dest=/gpg/trustdb.gpg owner={{deploy_user}}

- name: place environmental variables file
  copy: src=webserver-dev.sh dest="/home/{{deploy_user}}/webserver-dev.sh"
  sudo_user: "{{deploy_user}}"

- name: place django management script
  template: src=manage.sh.j2 dest=/home/{{deploy_user}}/manage.sh mode=700
  sudo_user: "{{deploy_user}}"

# No longer needed as static files are collected by mutexleader and sent to s3
#- name: collect static files
#  sudo_user: "{{deploy_user}}"
#  command: "/home/{{deploy_user}}/manage.sh collectstatic --noinput --clear"

- name: place start file
  template: src=start.sh.j2 dest=/home/{{deploy_user}}/start.sh mode=700
  sudo_user: "{{deploy_user}}"
  notify:
    - restart supervisor
    - restart nginx
